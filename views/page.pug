doctype html 
html(lang="ja")
  head
    meta(charset="UTF-8")
    meta(name="posts" content= posts)
    meta(name="user" content= user)
    meta(name="viewport" content="width=device-width,initial-scale=1")
    link(rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.0/font/bootstrap-icons.css")
    link(rel="stylesheet",
    href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css",
    integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm",
    crossorigin="anonymous")
    title お気に入り記録
  body.container
    div.my-3
      a(href="/logout").btn.btn-secondary.float-right ログアウト
      h1 お気に入り記録 #[i.bi.bi-bookmark-heart]
    h2 新規作成
    form(method="post" action="/posts")
      div.form-group
        textarea(name="cat" placeholder="タイトル" rows="1").form-control
        textarea(name="content" placeholder="本文" rows="4").form-control
        input(type="hidden" name="oneTimeToken" value=oneTimeToken)
      div.form-group
        button(type="submit").btn.btn-primary #[i.bi.bi-chat-heart-fill] 投稿

    div.my-5
      input(id="search-input" class="form-control" style="border: solid 3px #00ECFF" type="text" placeholder="検索")
      div(id="search-display")

    h2 投稿一覧
    each post in posts
      - let cardClass = (user === post.postedBy ? 'card my-3 bg-primary text-white' : 'card my-3')
      div(class=`${cardClass}` id=`favo-${post.id}`)
        - let isDeletable = (user === post.postedBy || user === 'admin')
        div.card-header
          span.h4.float-left(style="white-space:pre;") #{post.cat || 'タイトルなし'}
          button(type="button" class="share-button" data-share= post.id).btn.btn-success.float-right #[i.bi.bi-share] 共有
          if isDeletable
            form(method="post" action="/posts/delete")
              input(type="hidden" name="id" value=post.id)
              button(type="submit").btn.btn-danger.float-right #[i.bi.bi-trash] 削除
        div.card-body
          div.d-flex.align-items-center.justify-content-between
            div.d-flex.align-items-center
              svg.d-block.bg-light.rounded-circle.mr-3(data-jdenticon-value=post.postedBy width="30" height="30")
              h5 #{post.postedBy}
            small #{post.formattedCreatedAt}
          hr
          p.card-text(style="white-space:pre; overflow:auto;") #{post.content}

    script(src="https://cdn.jsdelivr.net/npm/dayjs@1/dayjs.min.js")

<!-- アイコン -->
    script(
      src="https://cdn.jsdelivr.net/npm/jdenticon@3.2.0/dist/jdenticon.min.js"
      async integrity="sha384-yBhgDqxM50qJV5JPdayci8wCfooqvhFYbIKhv0hTtLvfeeyJMJCscRfFNKIxt43M"
      crossorigin="anonymous")

<!-- 検索機能 -->
    script.
      let meta = document.querySelector('meta[name="posts"]');
      let usermeta = document.querySelector('meta[name="user"]');
      const posts = JSON.parse(meta.content);
      const user = (usermeta.content);
      const searchInput = document.getElementById('search-input');
      let searchDisplay = document.getElementById('search-display');

      searchInput.addEventListener('input', () => {
        if (searchInput.value.length === 0){
          return;
        }
        let keyword = null;
        try {
          keyword = hiraganaToKatakana(searchInput.value);
          keyword = new RegExp(keyword);
        } catch {
          return;
        }

        const checkedPosts = posts.filter((post) => {
          let target = post.content + post.cat + post.postedBy;
          target = hiraganaToKatakana(target);

          const result = keyword.test(target);
          return result;
        });

        displayData(checkedPosts);
      });

      function displayData(checkedPosts) {
        const keyword = searchInput.value;
        searchDisplay.innerHTML = '';
        if (checkedPosts.length > 0){
          searchDisplay.innerHTML = `<h4>「${keyword}」が含まれる投稿</h4>`;
          for (const post of checkedPosts) {
            let isDeletable = (user === post.postedBy || user === 'admin')
            searchDisplay.innerHTML += `
            <div class="card my-3">
              <div class="card-header">
                <span class="h4 float-left" style="white-space:pre;">${sanitize(post.cat)?.replaceAll(keyword, `<strong style="color:red;">${keyword}</strong>`) || 'タイトルなし'}</span>
                ${
                  isDeletable ? 
                  `<form method="post" action="/posts/delete">
                      <input type="hidden" name="id" value="${post.id}">
                      <button class="btn btn-danger float-right" type="submit"><i class="bi bi-trash"></i> 削除</button>
                    </form>` :
                    ''
                }
              </div>
              <div class="card-body">
                <div class="d-flex align-items-center justify-content-between">
                  <div class="d-flex align-items-center">
                    <svg class="d-block bg-light rounded-circle mr-3" data-jdenticon-value="${post.postedBy}" width="30" height="30"></svg>
                    <h5>${post.postedBy.replaceAll(keyword, `<strong style="color:red;">${keyword}</strong>`)}</h5>
                  </div>
                  <small class="float-right">${dayjs(post.createdAt).format('YYYY年MM月DD日 HH時mm分ss秒')}</small>
                </div>
                <hr>
                <p class="card-text" style="white-space:pre; overflow:auto;">${sanitize(post.content).replaceAll(keyword, `<strong style="color:red;">${keyword}</strong>`)}</p>
              </div>
            </div>
            `;
          }
          const script = document.createElement('script');
          script.setAttribute('src', "https://cdn.jsdelivr.net/npm/jdenticon@3.2.0/dist/jdenticon.min.js");
          script.setAttribute('async', '');
          script.setAttribute('integrity', "sha384-yBhgDqxM50qJV5JPdayci8wCfooqvhFYbIKhv0hTtLvfeeyJMJCscRfFNKIxt43M");
          script.setAttribute('crossorigin', "anonymous");
          searchDisplay.appendChild(script);
        } else {
          searchDisplay.innerHTML = `<h4>「${keyword}」に一致する投稿はありませんでした</h4>`;
        }
      }

      function hiraganaToKatakana(text) {
        return text.replace(/[\u3041-\u3096]/g, (match) => {
          const charCode = match.charCodeAt(0) + 0x60;
          return String.fromCharCode(charCode);
        });
      }

      //- htmlにしない
      function sanitize(input) {
        return input
          .replace(/</g, '&lt;')
          .replace(/>/g, '$gt;')
          .replace(/&/g, '&amp;')
          .replace(/'/g, '&apos;')
          .replace(/"/g, '&quot;');
      }

      //- 共有ボタン
      const shareButtons = document.querySelectorAll('.share-button');
      shareButtons.forEach((shareButton) => {
        shareButton.addEventListener('click', () => {
          const shareUrl = `${location.origin}/posts#favo-${shareButton.dataset.share}`;
          navigator.clipboard.writeText(shareUrl).then(() => {
            shareButton.innerHTML = `<i class="bi bi-bookmark-check">Copied!</i>`;
            setTimeout(() => shareButton.innerHTML = '<i class="bi bi-share-fill">共有</i>', 1000);
          });
        });
      });

    //- bootstrap
    script(src="https://code.jquery.com/jquery-3.4.1.slim.min.js")
    script(src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js",
    integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl",
    crossorigin="anonymous")

    //- 共有されたURLと投稿
    script.
      const hash = location.hash;
      const id = hash.match(/^#favo-(\d+)$/)?.[1];

      if (id) {
        const card = document.querySelector(`#favo-${id}`);
        if (card) {
          card.classList.remove('bg-primary');
          card.classList.add('bg-secondary', 'text-light');
          const cardTitle = card.querySelector('div.card-header > span');
          cardTitle.innerHTML += `    <span class="badge bg-warning text-dark">共有された投稿</span>`;
        } else {
          alert('共有された投稿は見つかりませんでした。');
        }
      }
